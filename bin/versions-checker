#!/usr/bin/env node
"use strict";function around(o,n,e){var r=o[n];o[n]=function(){for(var o=new Array(arguments.length),n=0;n<o.length;n++)o[n]=arguments[n];return e.call(this,r,o)}}function before(o,n,e){var r=o[n];o[n]=function(){e.call(this),r.apply(this,arguments)}}function exit(o){function n(){e--||_exit(o)}var e=0,r=[process.stdout,process.stderr];exit.exited=!0,r.forEach(function(o){e+=1,o.write("",n)}),n()}var commander=require("commander"),version=require("./../package.json").version,colors=require("colors"),_exit=process.exit;if(process.exit=exit,around(commander,"optionMissingArgument",function(o,n){return commander.outputHelp(),o.apply(this,n),{args:[],unknown:[]}}),before(commander,"outputHelp",function(){this._helpShown=!0}),before(commander,"unknownOption",function(){this._allowUnknownOption=this._helpShown,this._helpShown||commander.outputHelp()}),commander.version(version,"    --version").usage("[options]").option("-n  --node","check node version").option("    --npm","check npm version").option("-y  --yarn","check yarn version").option("-g  --git","check git version").option("-k  --karma","check karma version").option("-m  --mocha","check mocha version").option("-g  --gulp","check gulp version").option("    --grunt","check grunt version").option("-e  --eslint","check eslint version").option("-t  --tslint","check tslint version").option("-p  --print-cli","check print-cli version"),commander.on("--help",function(){console.log(),console.log(colors.green("  Examples:")),console.log(),console.log(colors.green("    $ "+commander.name()+' --node ">=4.2.1"')),console.log(colors.green("    $ "+commander.name()+" --help")),console.log()}),commander.parse(process.argv),!exit.exited){try{commander.outputHelp()}catch(o){console.error("[ERROR] -- something went wrong -- ",o)}exit.exited=!1,_exit(0)}